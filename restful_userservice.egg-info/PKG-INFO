Metadata-Version: 1.1
Name: restful-userservice
Version: 0.0.1
Summary: Restful User-Service
Home-page: https://github.com/TGM-HIT/simple-user-database
Author: Michael Borko
Author-email: mborko@tgm.ac.at
License: UNKNOWN
Description: # "Restful User-Service"
        
        ## Aufgabenstellung
        Die detaillierte [Aufgabenstellung](TASK.md) beschreibt die notwendigen Schritte zur Realisierung.
        
        ## Implementierung
        
        ### Python-Flask
        
        Rest kann auf zwei weisen in Python implementiert werden, in klassen wie im Flask Rest Beispiel oder mit methoden wie in dieser application.
        In beiden fÃ¤llen werden den methoden und klassen URL adressen und CRUD befehle zugewiesen auf die sie reagieren.
        
            @app.route('/users', methods=['GET', 'POST']) # Annotation for the method
        
        Da man mehrere CRUD Befehle einer methode zuweisen kann, muss diese natÃ¼rlich inerhalb des programms unterscheiden kÃ¶nnen.
        
            if request.method == 'POST':
        
        Da REST mit Json im hintergrund arbeitet mÃ¼ssen die returns der methoden zu Json umgewandelt werden und am besten mit dictionaries inerhalb der methoden gearbeited werden.
        
            return jsonify(response_object) # Return the dictionary response_object
        
        Die methoden mÃ¼ssen natÃ¼rlich auch variablen aus der adresszeile lesen kÃ¶nnen. Besagte variablen sind, wie schon erwÃ¤hnt, im Json format.
        
            post_data = request.get_json()
            post_data.get('username') # Get the value to the key username
        
        #### Imports
        
            from flask import Flask, jsonify, request
            from flask_cors import CORS
        
        ### Single-Page-Application-with-Vue.js
        
        Vue.js ermÃ¶glicht die erzeugung einer webbasierten grafischen oberflÃ¤che fÃ¼r Flask applicationen.
        
        Um ein vue.js project zu starten muss man einfach folgendes im passendem directory eingeben.
        
            vue init webpack <name>
        
        Die WeboberflÃ¤chen befinden sich in client/src/components.
        
        Der router ist client/src/router/index.js und erlaubt dir den weboberflÃ¤chen URL adressen zu zuweisen.
        
        App.vue welches sich in client/src befinded ist der wrapper in dem die anderen .js dateien eigefÃ¼gt werden.
        Dies ist auch das file in dem man das vue.js logo entfernen kann.
        
        Axios erlaubt vue.js die python-flask application anzusprechen.
        
        ### Client-Desktop-Application
        
        Die Desktop-Application befindet sich im client file um ist ein einfaches PyQT5 programm welches via requests mit dem server communiziert.
        
        ## Deployment
        
        Der server wird mit "python app.py" im server order ausgefÃ¼hrt.
        
        ### WeboberflÃ¤che
        
        Om die WeboberflÃ¤che zu erzeugen muss "npm run dev" im Client ordner via CLI ausgefÃ¼hrt werden.
        
        Zu finden ist sie dann auf localhost:8080
        
        ### Client-Desktop-Application
        
        Die Client-Desktop-Application wird einfach mit "python gui.py" im client ordner ausgefÃ¼hrt. Es muss der server laufen damit sie funktionert.
        
        ### Testing
        
        Um Backend Testing auszufÃ¼hren einfach tox im project directory eingeben.
        
        Frontend Testing der Desktop Client Application wird ebenfalls von tox gestarted, benÃ¶tigt aber einen laufenden Backend server um zu funktionieren.
        
        Da pytest-qt nicht die fÃ¤higkeit besitzt Klicks auf die Tabelle zu simulieren benÃ¶tigen alle Update und Delete Tests Manuellen User Input. Dieser user input besteht daraus auf update/delete des entsprechenden Users zu klicken.
        
        Frontend testing  der WeboberflÃ¤che wird mittels "npx cypress open" im project directory gestarted.
        Sowohl der Server als auch die weboberflÃ¤che mÃ¼ssen hierbei natÃ¼rlich laufen.
        
        ## Quellen
        [Flask Rest](https://flask-restful.readthedocs.io/en/latest/quickstart.html#full-example)
        
        [Sqlite with Python](https://docs.python.org/3/library/sqlite3.html)
        
        [Full-stack single page application with Vue.js and Flask](https://codeburst.io/full-stack-single-page-application-with-vue-js-and-flask-b1e036315532)
        
        [Developing a Single Page App with Flask and Vue.js](https://testdriven.io/developing-a-single-page-app-with-flask-and-vuejs)
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
